name: wpe-webkit-mir-kiosk
base: core20
version: "2.28.1" # wpe-webkit release version. TODO: use adopt-info
summary: WPE Webkit in kiosk mode. Intended for mir-kiosk on embedded devices.
description: |
  'WPE Webkit (https://wpewebkit.org) is an official fork of the WebKit project.
  From the website: “WPE WebKit allows embedders to create simple and performant
  systems based on Web platform technologies. It is designed with hardware
  acceleration in mind, leveraging common 3D graphics APIs for best
  performance.”
  This snap runs the included MiniBrowser as a service in kiosk mode.'

grade: stable
confinement: strict

# TODO: Check if these paths can be made relative with compiler flags
layout:
  # Relies on cmake install prefix $SNAP/usr, /libexec is not allowed
  /usr/libexec/wpe-webkit-1.0:
    bind: $SNAP/usr/wpe-webkit-1.0
  /usr/lib/$SNAPCRAFT_ARCH_TRIPLET/wpe-webkit-1.0:
    bind: $SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/wpe-webkit-1.0
  /etc/fonts/conf.avail:
    bind: $SNAP/etc/fonts/conf.avail
  /etc/ssl/certs/ca-certificates.crt:
    bind-file: $SNAP/etc/ssl/certs/ca-certificates.crt
  /usr/share/X11:
    bind: $SNAP/usr/share/X11
  /usr/share/fonts:
    bind: $SNAP/usr/share/fonts
  /usr/local/share/fonts: # wpe-webkit: Search ALL the fonts!
    bind: $SNAP/usr/share/fonts

environment:
  LC_ALL: C.UTF-8
  LD_LIBRARY_PATH: ${LD_LIBRARY_PATH}:${SNAP}/usr/lib/:${SNAP}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/:${SNAP}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/pulseaudio

  LIBGL_DRIVERS_PATH: ${SNAP}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/dri
  # cf. https://tutorials.ubuntu.com/tutorial/wayland-kiosk#9
  # Liberally adapted from
  # https://github.com/MirServer/mir-kiosk-apps/blob/master/snap/snapcraft.yaml
  # Some might not be needed, but omitting some would either crash
  # the WPE renderer process or cause AppArmor denials
  __EGL_VENDOR_LIBRARY_DIRS:
    $SNAP/etc/glvnd/egl_vendor.d:$SNAP/usr/share/glvnd/egl_vendor.d
    # XDG config
  XDG_CACHE_HOME: $SNAP_USER_COMMON/.cache
  XDG_CONFIG_DIRS: ${SNAP}/etc/xdg:$XDG_CONFIG_DIRS
  XDG_CONFIG_HOME: $SNAP_USER_DATA/.config
  XDG_DATA_DIRS: ${SNAP}/usr/share:$XDG_DATA_DIRS
  XDG_DATA_HOME: ${SNAP}/usr/share

  XKB_CONFIG_ROOT: ${SNAP}/usr/share/X11/xkb
  FONTCONFIG_PATH: ${SNAP}/etc/fonts/conf.d
  FONTCONFIG_FILE: ${SNAP}/etc/fonts/fonts.conf

plugs:
  # Auto-connected
  wayland:
  opengl: # required for libEGL to work
  network:
  network-bind: # Remote inspector
  upower-observe:
  # Manually connected, show up as AppArmor denials but
  # basic browsing seems to work fine without
  avahi-observe: # zeroconf name resolution
  # snappy-debug suggestions
  network-manager:
  hostname-control:
  process-control:
  # - browser-support # TODO: Use this if/when we can get rid of preload/desktop-launch

slots:
  dbus-cogctl:
    interface: dbus
    bus: system
    name: com.igalia.Cog

apps:
  daemon:
    command-chain:
      - bin/run-daemon
      - bin/wayland-launch
    command: bin/launch-wpe
    daemon: simple
    restart-condition: always
    slots: [dbus-cogctl]
  restart-watcher:
    command: bin/watcher.sh
    daemon: simple
    restart-condition: always

  cog:
    command-chain:
      - bin/wayland-launch
    command: bin/launch-wpe

parts:
  mir-kiosk-snap-launch:
    plugin: dump
    source: https://github.com/MirServer/mir-kiosk-snap-launch.git
    override-build: $SNAPCRAFT_PART_BUILD/build-with-plugs.sh opengl pulseaudio wayland
    stage-packages:
      - inotify-tools

  libwpe:
    plugin: meson
    # latest stable release
    source: https://wpewebkit.org/releases/libwpe-1.8.0.tar.xz
    meson-parameters:
      - --buildtype=release
      - --prefix=/usr
    build-packages:
      - build-essential
      - libegl1-mesa-dev
      - libxkbcommon-dev
    stage-packages:
      - libxkbcommon0

  wpebackend-fdo:
    after: [libwpe]
    plugin: meson
    meson-parameters:
      - --buildtype=release
      - --prefix=/usr
    # latest stable release
    source: https://wpewebkit.org/releases/wpebackend-fdo-1.8.0.tar.xz
    build-packages:
      - build-essential
      - ccache
      - libegl1
      - libegl-mesa0
      - libegl1-mesa-dev
      - libwayland-egl1
      - libglib2.0-dev
      - libepoxy-dev
      - libxkbcommon-dev
    stage-packages:
      - libegl1-mesa
      - libwayland-egl1
      - libwayland-client0
      - libwayland-server0
      - libxkbcommon0

  wpe-webkit:
    after: [wpebackend-fdo]
    # latest stable release
    source: https://wpewebkit.org/releases/wpewebkit-2.30.5.tar.xz
    plugin: cmake
    cmake-generator: Ninja
    cmake-parameters:
      - -DPORT=WPE
      - -DCMAKE_BUILD_TYPE=Release
      - -DCMAKE_INSTALL_PREFIX:PATH=/usr
      - -DENABLE_BUBBLEWRAP_SANDBOX=OFF
    build-packages:
      - build-essential
      - gperf
      - ninja-build
      - libcairo2-dev
      - libepoxy-dev
      - libgbm-dev
      - libgcrypt20-dev
      - libgstreamer-plugins-base1.0-dev
      - libicu-dev
      - libjpeg8-dev
      - libopenjp2-7-dev
      - libsoup2.4-dev
      - libsqlite3-dev
      - libtasn1-6-dev
      - libwebp-dev
      - libwoff-dev
      - libxml2-dev
      - libxslt1-dev
      - pkg-config
      - python
      - ruby-dev
      - wayland-protocols
      # TODO: Are these still required without the minibrowser?
      - weston
      - zlib1g-dev
      - libatk1.0-dev
      - libatk-bridge2.0-dev
    stage-packages:
      - libatk1.0-0 # TODO: Required at runtime?
      - libatk-bridge2.0-0 # TODO: Required at runtime?
      - libgpm2
      - libwayland-client0
      - libwayland-server0
      - libcairo2
      - libepoxy0
      - libgbm1
      - libgl1
      - libglx0
      - libgcrypt20
      - libgstreamer-gl1.0-0
      - libgstreamer-plugins-base1.0-0
      - libharfbuzz-icu0
      - libicu66
      - libjpeg8
      - libopenjp2-7
      - liborc-0.4-0
      - libsoup2.4-1
      - libsqlite3-0
      - libtasn1-6
      - libwebp6
      - libwebpdemux2
      - libwoff1
      - libxml2
      - libxml2-utils
      - libxslt1.1
      - python
      - ruby
      - zlib1g
      # from https://github.com/Igalia/meta-webkit/blob/e0d5fb3c66b910984464f1f22567a0cd618331ae/recipes-browser/wpewebkit/wpewebkit.inc#L87
      - gstreamer1.0-gl
      - gstreamer1.0-libav
      - gstreamer1.0-plugins-base
      # FIXME: Pull in only packages referenced in Yocto image to avoid bloat
      - gstreamer1.0-plugins-good
    # override-pull: |
    # snapcraftctl pull
    # Add correct compiler macro for clang
    # see https://gcc.gnu.org/ml/gcc-patches/2015-07/msg02237.html
    # Second insertions are source's line number + 1 (from prev insertion)
    # sed -i '143i|| defined(__ARM_ARCH_6KZ__) \\' Source/bmalloc/bmalloc/BPlatform.h
    # sed -i '184i|| defined(__ARM_ARCH_6KZ__) \\' Source/bmalloc/bmalloc/BPlatform.h
    # sed -i '188i|| defined(__ARM_ARCH_6KZ__) \\' Source/WTF/wtf/Platform.h
    # sed -i '236i|| defined(__ARM_ARCH_6KZ__) \\' Source/WTF/wtf/Platform.h
    # override-build: |
    # clang err's because some ruby gluecode cannot determine LP builder's endian type, gcc works
    # export CC=/usr/bin/clang
    # export CXX=/usr/bin/clang++
    # snapcraftctl build
    override-build: |
      WPE_VERSION=$(grep -E 'SET_PROJECT_VERSION\(\d+ \d+ \d+\)' "$SNAPCRAFT_PART_SRC/Source/cmake/OptionsWPE.cmake" | tr -d '[:alpha:]_()')
      VERSION_STRING=$(echo "$WPE_VERSION" | tr '[:blank:]' '.')
      WPE_MINOR_VERSION=$(echo "WPE_VERSION" | cut -d' ' -f2)

      snapcraftctl set-version "$VERSION_STRING"

      # Even-numbered minor versions indicate stable releases. See https://wpewebkit.org/release/schedule/
      if [ $(( WPE_MINOR_VERSION % 2)) -eq 0 ]; then
        snapcraftctl set-grade stable
      else
        snapcraftctl set-grade devel
      fi

      snapcraftctl build
    organize:
      libexec: usr/

  # See Source/cmake/WebKitFeatures.cmake for build-time options.
  # See Source/cmake/OptionsWPE.cmake for overrides applied by WPE.
  # See Source/cmake/OptionsWPE.cmake for required packages.
  cog:
    plugin: cmake
    source: https://github.com/Igalia/cog.git
    source-tag: v0.8.0
    cmake-parameters:
      - -DCMAKE_BUILD_TYPE=Release
      - -GNinja
      - -DCOG_DBUS_SYSTEM_BUS=ON
    build-packages:
      - ninja-build
      - libcairo2-dev
      - libsoup2.4-dev
      - libxkbcommon-dev
      - libwayland-dev
      - libegl1-mesa-dev
      - wayland-protocols
      - libwayland-bin
    stage-packages:
      # Runtime requirements for cog browser
      - glib-networking # required for SSL/TLS support
      - glib-networking-common
      - glib-networking-services
      - libgles2
      - libslang2 # dep for gstreamer ASCII art modules ¯\_(ツ)_/¯
      - libgpm2 # mouse
      - libgdk-pixbuf2.0-0
      # TODO: Fix zeroconf/Bonjour name resolution, these don't seem to suffice
      - libavahi-core7
      - libavahi-glib1
      - libavahi-common3
      - libavahi-client3
      - libwayland-cursor0
      # dependencies listed for cog 0.4.0 debian package:
      - libxkbcommon0
      - libegl1
      - libglib2.0-0
      - libsoup2.4-1
      - libwayland-client0
      - libwayland-egl1
      - freeglut3
      - libglu1-mesa
      - shared-mime-info
    override-prime: |
      snapcraftctl prime
      glib-compile-schemas usr/share/glib-2.0/schemas/
      # see https://stackoverflow.com/questions/28953925/glib-gio-error-no-gsettings-schemas-are-installed-on-the-system
      # creates ca-certificates.crt on build host and copies to snap prime dir
      update-ca-certificates
      mkdir -p etc/ssl/certs
      cp /etc/ssl/certs/ca-certificates.crt etc/ssl/certs/
    organize:
      usr/local/: /

  launch-wpe:
    plugin: dump
    source: src/launcher
    organize:
      launch-wpe: bin/

  restart-watcher:
    plugin: dump
    source: src/watcher
    stage-packages:
      - inotify-tools
    organize:
      watcher.sh: bin/
